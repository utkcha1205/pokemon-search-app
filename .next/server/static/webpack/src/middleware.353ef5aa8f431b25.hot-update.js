"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/middleware.ts":
/*!***************************!*\
  !*** ./src/middleware.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var _auth_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth.config */ \"(middleware)/./src/auth.config.ts\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth */ \"(middleware)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_routes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/routes */ \"(middleware)/./src/lib/routes.ts\");\n// import { NextRequest, NextResponse } from \"next/server\";\n// import { authMiddleware } from \"../middlewares/apis/authMiddleware\";\n// import { loggingMiddleware } from \"../middlewares/apis/loggingMiddleware\";\n// import {getServerSession} from 'next-auth'\n// export const config = {\n//     matcher: \"/api/:path*\"\n// }\n// const protectedRoutes = [\"/middlewareComp\"]\n// export async function  middleware(request:NextRequest){\n//     const session = await getServerSession()\n//     if(!session && protectedRoutes.includes(request.nextUrl.pathname)){\n//         const abosulteUrl = new URL('/', request.nextUrl.origin)\n//         return NextResponse.redirect(abosulteUrl.toString())\n//     }\n//     // if(request.url.includes(\"/api/notes\")){\n//     //     const logResult = loggingMiddleware(request)\n//     //     console.log(\"logResult\",logResult.response)\n//     // }\n//     // const authResult = authMiddleware(request)\n//     // if(!authResult?.isValid){\n//     //     return new NextResponse(JSON.stringify({message: 'unauthorized'}), {status: 401})\n//     // }\n//     const requestHeaders = new Headers(request.headers);\n//   const response = NextResponse.next({\n//     request: {\n//       headers: requestHeaders,\n//     },\n//   });\n//   return response;\n// }\n//  Runnning middleware\n// import { NextRequest, NextResponse } from \"next/server\";\n// import { authMiddleware } from \"../middlewares/apis/authMiddleware\";\n// import { loggingMiddleware } from \"../middlewares/apis/loggingMiddleware\";\n// import { cookies } from \"next/headers\";\n// export const config = {\n//   matcher: [\"/api\", \"/middlewareComp\"],\n// };\n// const protectedRoutes = [\"/middlewareComp\"];\n// export async function middleware(request: NextRequest) {\n//     let token:any =  cookies()?.get('midToken');\n//   // Fetch the session once and await it if it is an async operation\n// //   const session = await getServerSession();\n// //   console.log(session,\"seeeeeee\")\n//   // Check if the session is missing and the route is protected\n//   if (!token.value && protectedRoutes.includes(request.nextUrl.pathname)) {\n//     const absoluteUrl = new URL(\"/\", request.nextUrl.origin);\n//     return NextResponse.redirect(absoluteUrl.toString());\n//   }\n//   // Perform logging if the request URL includes \"/api/notes\"\n//   if (request.url.includes(\"/api/notes\")) {\n//     const logResult = loggingMiddleware(request);\n//     console.log(\"logResult\", logResult.response);\n//   }\n//   // Check authentication validity using authMiddleware\n//   const authResult = authMiddleware(request);\n//   if (!authResult?.isValid) {\n//     // Return a response immediately if the user is not authorized\n//     return new NextResponse(JSON.stringify({ message: \"unauthorized\" }), {\n//       status: 401,\n//     });\n//   }\n//   // If no early return has occurred, proceed with the request\n//   return NextResponse.next();\n// }\n\n\n\nconst { auth } = next_auth__WEBPACK_IMPORTED_MODULE_2___default()(_auth_config__WEBPACK_IMPORTED_MODULE_1__.authConfig);\n\nasync function middleware(request) {\n    // console.log(auth(),\"authhhhhhh\")\n    const { nextUrl } = request;\n    //   const session = await auth();\n    const isAuthenticated = true;\n    console.log(isAuthenticated, nextUrl.pathname);\n    const isPublicRoute = !_lib_routes__WEBPACK_IMPORTED_MODULE_3__.PROTECTED_SUB_ROUTES.find((route)=>nextUrl.pathname.includes(route));\n    console.log(isPublicRoute);\n    if (!isAuthenticated && !isPublicRoute) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(_lib_routes__WEBPACK_IMPORTED_MODULE_3__.LOGIN, nextUrl));\n}\nconst config = {\n    matcher: [\n        \"/((?!.+\\\\.[\\\\w]+$|_next).*)\",\n        \"/\",\n        \"/(api|trpc)(.*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vc3JjL21pZGRsZXdhcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDJEQUEyRDtBQUMzRCx1RUFBdUU7QUFDdkUsNkVBQTZFO0FBQzdFLDZDQUE2QztBQUU3QywwQkFBMEI7QUFDMUIsNkJBQTZCO0FBQzdCLElBQUk7QUFFSiw4Q0FBOEM7QUFFOUMsMERBQTBEO0FBQzFELCtDQUErQztBQUUvQywwRUFBMEU7QUFDMUUsbUVBQW1FO0FBQ25FLCtEQUErRDtBQUMvRCxRQUFRO0FBQ1IsaURBQWlEO0FBQ2pELDBEQUEwRDtBQUMxRCx5REFBeUQ7QUFDekQsV0FBVztBQUNYLG9EQUFvRDtBQUVwRCxtQ0FBbUM7QUFDbkMsK0ZBQStGO0FBQy9GLFdBQVc7QUFDWCwyREFBMkQ7QUFDM0QseUNBQXlDO0FBQ3pDLGlCQUFpQjtBQUNqQixpQ0FBaUM7QUFDakMsU0FBUztBQUNULFFBQVE7QUFDUixxQkFBcUI7QUFDckIsSUFBSTtBQUVKLHVCQUF1QjtBQUd2QiwyREFBMkQ7QUFDM0QsdUVBQXVFO0FBQ3ZFLDZFQUE2RTtBQUM3RSwwQ0FBMEM7QUFFMUMsMEJBQTBCO0FBQzFCLDBDQUEwQztBQUMxQyxLQUFLO0FBRUwsK0NBQStDO0FBRS9DLDJEQUEyRDtBQUMzRCxtREFBbUQ7QUFFbkQsdUVBQXVFO0FBQ3ZFLGlEQUFpRDtBQUNqRCx1Q0FBdUM7QUFDdkMsa0VBQWtFO0FBQ2xFLDhFQUE4RTtBQUM5RSxnRUFBZ0U7QUFDaEUsNERBQTREO0FBQzVELE1BQU07QUFFTixnRUFBZ0U7QUFDaEUsOENBQThDO0FBQzlDLG9EQUFvRDtBQUNwRCxvREFBb0Q7QUFDcEQsTUFBTTtBQUVOLDBEQUEwRDtBQUMxRCxnREFBZ0Q7QUFFaEQsZ0NBQWdDO0FBQ2hDLHFFQUFxRTtBQUNyRSw2RUFBNkU7QUFDN0UscUJBQXFCO0FBQ3JCLFVBQVU7QUFDVixNQUFNO0FBRU4saUVBQWlFO0FBQ2pFLGdDQUFnQztBQUNoQyxJQUFJO0FBSXVDO0FBQ0E7QUFDVjtBQUVqQyxNQUFNLEVBQUVHLElBQUksRUFBRSxHQUFHRCxnREFBUUEsQ0FBQ0Qsb0RBQVVBO0FBRTRCO0FBRXpELGVBQWVLLFdBQVdDLE9BQVc7SUFDeEMsbUNBQW1DO0lBQ3JDLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUdEO0lBQ3RCLGtDQUFrQztJQUNoQyxNQUFNRSxrQkFBa0I7SUFDeEJDLFFBQVFDLEdBQUcsQ0FBQ0YsaUJBQWlCRCxRQUFRSSxRQUFRO0lBRTdDLE1BQU1DLGdCQUFrQixDQUFDUiw2REFBb0JBLENBQUNTLElBQUksQ0FBQ0MsQ0FBQUEsUUFBU1AsUUFBUUksUUFBUSxDQUFDSSxRQUFRLENBQUNEO0lBRXRGTCxRQUFRQyxHQUFHLENBQUNFO0lBRVosSUFBSSxDQUFDSixtQkFBbUIsQ0FBQ0ksZUFDdkIsT0FBT2IscURBQVlBLENBQUNpQixRQUFRLENBQUMsSUFBSUMsSUFBSWQsOENBQUtBLEVBQUVJO0FBQ2hEO0FBRU8sTUFBTVcsU0FBUztJQUNwQkMsU0FBUztRQUFDO1FBQStCO1FBQUs7S0FBa0I7QUFDbEUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbWlkZGxld2FyZS50cz9kMTk5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcbi8vIGltcG9ydCB7IGF1dGhNaWRkbGV3YXJlIH0gZnJvbSBcIi4uL21pZGRsZXdhcmVzL2FwaXMvYXV0aE1pZGRsZXdhcmVcIjtcbi8vIGltcG9ydCB7IGxvZ2dpbmdNaWRkbGV3YXJlIH0gZnJvbSBcIi4uL21pZGRsZXdhcmVzL2FwaXMvbG9nZ2luZ01pZGRsZXdhcmVcIjtcbi8vIGltcG9ydCB7Z2V0U2VydmVyU2Vzc2lvbn0gZnJvbSAnbmV4dC1hdXRoJ1xuXG4vLyBleHBvcnQgY29uc3QgY29uZmlnID0ge1xuLy8gICAgIG1hdGNoZXI6IFwiL2FwaS86cGF0aCpcIlxuLy8gfVxuXG4vLyBjb25zdCBwcm90ZWN0ZWRSb3V0ZXMgPSBbXCIvbWlkZGxld2FyZUNvbXBcIl1cblxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uICBtaWRkbGV3YXJlKHJlcXVlc3Q6TmV4dFJlcXVlc3Qpe1xuLy8gICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRTZXJ2ZXJTZXNzaW9uKClcblxuLy8gICAgIGlmKCFzZXNzaW9uICYmIHByb3RlY3RlZFJvdXRlcy5pbmNsdWRlcyhyZXF1ZXN0Lm5leHRVcmwucGF0aG5hbWUpKXtcbi8vICAgICAgICAgY29uc3QgYWJvc3VsdGVVcmwgPSBuZXcgVVJMKCcvJywgcmVxdWVzdC5uZXh0VXJsLm9yaWdpbilcbi8vICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChhYm9zdWx0ZVVybC50b1N0cmluZygpKVxuLy8gICAgIH1cbi8vICAgICAvLyBpZihyZXF1ZXN0LnVybC5pbmNsdWRlcyhcIi9hcGkvbm90ZXNcIikpe1xuLy8gICAgIC8vICAgICBjb25zdCBsb2dSZXN1bHQgPSBsb2dnaW5nTWlkZGxld2FyZShyZXF1ZXN0KVxuLy8gICAgIC8vICAgICBjb25zb2xlLmxvZyhcImxvZ1Jlc3VsdFwiLGxvZ1Jlc3VsdC5yZXNwb25zZSlcbi8vICAgICAvLyB9XG4vLyAgICAgLy8gY29uc3QgYXV0aFJlc3VsdCA9IGF1dGhNaWRkbGV3YXJlKHJlcXVlc3QpXG5cbi8vICAgICAvLyBpZighYXV0aFJlc3VsdD8uaXNWYWxpZCl7XG4vLyAgICAgLy8gICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHttZXNzYWdlOiAndW5hdXRob3JpemVkJ30pLCB7c3RhdHVzOiA0MDF9KVxuLy8gICAgIC8vIH1cbi8vICAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlcXVlc3QuaGVhZGVycyk7XG4vLyAgIGNvbnN0IHJlc3BvbnNlID0gTmV4dFJlc3BvbnNlLm5leHQoe1xuLy8gICAgIHJlcXVlc3Q6IHtcbi8vICAgICAgIGhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuLy8gICAgIH0sXG4vLyAgIH0pO1xuLy8gICByZXR1cm4gcmVzcG9uc2U7XG4vLyB9XG5cbi8vICBSdW5ubmluZyBtaWRkbGV3YXJlXG5cblxuLy8gaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuLy8gaW1wb3J0IHsgYXV0aE1pZGRsZXdhcmUgfSBmcm9tIFwiLi4vbWlkZGxld2FyZXMvYXBpcy9hdXRoTWlkZGxld2FyZVwiO1xuLy8gaW1wb3J0IHsgbG9nZ2luZ01pZGRsZXdhcmUgfSBmcm9tIFwiLi4vbWlkZGxld2FyZXMvYXBpcy9sb2dnaW5nTWlkZGxld2FyZVwiO1xuLy8gaW1wb3J0IHsgY29va2llcyB9IGZyb20gXCJuZXh0L2hlYWRlcnNcIjtcblxuLy8gZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbi8vICAgbWF0Y2hlcjogW1wiL2FwaVwiLCBcIi9taWRkbGV3YXJlQ29tcFwiXSxcbi8vIH07XG5cbi8vIGNvbnN0IHByb3RlY3RlZFJvdXRlcyA9IFtcIi9taWRkbGV3YXJlQ29tcFwiXTtcblxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1pZGRsZXdhcmUocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbi8vICAgICBsZXQgdG9rZW46YW55ID0gIGNvb2tpZXMoKT8uZ2V0KCdtaWRUb2tlbicpO1xuICAgIFxuLy8gICAvLyBGZXRjaCB0aGUgc2Vzc2lvbiBvbmNlIGFuZCBhd2FpdCBpdCBpZiBpdCBpcyBhbiBhc3luYyBvcGVyYXRpb25cbi8vIC8vICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGdldFNlcnZlclNlc3Npb24oKTtcbi8vIC8vICAgY29uc29sZS5sb2coc2Vzc2lvbixcInNlZWVlZWVlXCIpXG4vLyAgIC8vIENoZWNrIGlmIHRoZSBzZXNzaW9uIGlzIG1pc3NpbmcgYW5kIHRoZSByb3V0ZSBpcyBwcm90ZWN0ZWRcbi8vICAgaWYgKCF0b2tlbi52YWx1ZSAmJiBwcm90ZWN0ZWRSb3V0ZXMuaW5jbHVkZXMocmVxdWVzdC5uZXh0VXJsLnBhdGhuYW1lKSkge1xuLy8gICAgIGNvbnN0IGFic29sdXRlVXJsID0gbmV3IFVSTChcIi9cIiwgcmVxdWVzdC5uZXh0VXJsLm9yaWdpbik7XG4vLyAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChhYnNvbHV0ZVVybC50b1N0cmluZygpKTtcbi8vICAgfVxuXG4vLyAgIC8vIFBlcmZvcm0gbG9nZ2luZyBpZiB0aGUgcmVxdWVzdCBVUkwgaW5jbHVkZXMgXCIvYXBpL25vdGVzXCJcbi8vICAgaWYgKHJlcXVlc3QudXJsLmluY2x1ZGVzKFwiL2FwaS9ub3Rlc1wiKSkge1xuLy8gICAgIGNvbnN0IGxvZ1Jlc3VsdCA9IGxvZ2dpbmdNaWRkbGV3YXJlKHJlcXVlc3QpO1xuLy8gICAgIGNvbnNvbGUubG9nKFwibG9nUmVzdWx0XCIsIGxvZ1Jlc3VsdC5yZXNwb25zZSk7XG4vLyAgIH1cblxuLy8gICAvLyBDaGVjayBhdXRoZW50aWNhdGlvbiB2YWxpZGl0eSB1c2luZyBhdXRoTWlkZGxld2FyZVxuLy8gICBjb25zdCBhdXRoUmVzdWx0ID0gYXV0aE1pZGRsZXdhcmUocmVxdWVzdCk7XG5cbi8vICAgaWYgKCFhdXRoUmVzdWx0Py5pc1ZhbGlkKSB7XG4vLyAgICAgLy8gUmV0dXJuIGEgcmVzcG9uc2UgaW1tZWRpYXRlbHkgaWYgdGhlIHVzZXIgaXMgbm90IGF1dGhvcml6ZWRcbi8vICAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwidW5hdXRob3JpemVkXCIgfSksIHtcbi8vICAgICAgIHN0YXR1czogNDAxLFxuLy8gICAgIH0pO1xuLy8gICB9XG5cbi8vICAgLy8gSWYgbm8gZWFybHkgcmV0dXJuIGhhcyBvY2N1cnJlZCwgcHJvY2VlZCB3aXRoIHRoZSByZXF1ZXN0XG4vLyAgIHJldHVybiBOZXh0UmVzcG9uc2UubmV4dCgpO1xuLy8gfVxuXG5cblxuaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCI7XG5pbXBvcnQgeyBhdXRoQ29uZmlnIH0gZnJvbSBcIi4vYXV0aC5jb25maWdcIjtcbmltcG9ydCBOZXh0QXV0aCBmcm9tIFwibmV4dC1hdXRoXCI7XG5cbmNvbnN0IHsgYXV0aCB9ID0gTmV4dEF1dGgoYXV0aENvbmZpZyk7XG5cbmltcG9ydCB7IExPR0lOLCBST09ULCBQUk9URUNURURfU1VCX1JPVVRFU30gZnJvbSBcIkAvbGliL3JvdXRlc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWlkZGxld2FyZShyZXF1ZXN0OmFueSkge1xuICAgIC8vIGNvbnNvbGUubG9nKGF1dGgoKSxcImF1dGhoaGhoaGhcIilcbiAgY29uc3QgeyBuZXh0VXJsIH0gPSByZXF1ZXN0O1xuLy8gICBjb25zdCBzZXNzaW9uID0gYXdhaXQgYXV0aCgpO1xuICBjb25zdCBpc0F1dGhlbnRpY2F0ZWQgPSB0cnVlO1xuICBjb25zb2xlLmxvZyhpc0F1dGhlbnRpY2F0ZWQsIG5leHRVcmwucGF0aG5hbWUpO1xuXG4gIGNvbnN0IGlzUHVibGljUm91dGUgPSAoICFQUk9URUNURURfU1VCX1JPVVRFUy5maW5kKHJvdXRlID0+IG5leHRVcmwucGF0aG5hbWUuaW5jbHVkZXMocm91dGUpKSk7XG5cbiAgY29uc29sZS5sb2coaXNQdWJsaWNSb3V0ZSk7XG5cbiAgaWYgKCFpc0F1dGhlbnRpY2F0ZWQgJiYgIWlzUHVibGljUm91dGUpXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChuZXcgVVJMKExPR0lOLCBuZXh0VXJsKSk7XG59XG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gIG1hdGNoZXI6IFtcIi8oKD8hLitcXFxcLltcXFxcd10rJHxfbmV4dCkuKilcIiwgXCIvXCIsIFwiLyhhcGl8dHJwYykoLiopXCJdXG59OyJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJhdXRoQ29uZmlnIiwiTmV4dEF1dGgiLCJhdXRoIiwiTE9HSU4iLCJQUk9URUNURURfU1VCX1JPVVRFUyIsIm1pZGRsZXdhcmUiLCJyZXF1ZXN0IiwibmV4dFVybCIsImlzQXV0aGVudGljYXRlZCIsImNvbnNvbGUiLCJsb2ciLCJwYXRobmFtZSIsImlzUHVibGljUm91dGUiLCJmaW5kIiwicm91dGUiLCJpbmNsdWRlcyIsInJlZGlyZWN0IiwiVVJMIiwiY29uZmlnIiwibWF0Y2hlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.ts\n");

/***/ })

});